// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "automatic_inlining.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool automatic_inlining::ap_const_boolean_1 = true;
const sc_lv<1> automatic_inlining::ap_const_lv1_1 = "1";
const sc_logic automatic_inlining::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic automatic_inlining::ap_const_logic_0 = sc_dt::Log_0;

automatic_inlining::automatic_inlining(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln11_fu_53_p0);
    sensitive << ( b );

    SC_METHOD(thread_c);
    sensitive << ( and_ln11_fu_53_p0 );
    sensitive << ( xor_ln6_fu_47_p2 );

    SC_METHOD(thread_xor_ln6_fu_47_p0);
    sensitive << ( a );

    SC_METHOD(thread_xor_ln6_fu_47_p2);
    sensitive << ( xor_ln6_fu_47_p0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "automatic_inlining_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, xor_ln6_fu_47_p0, "xor_ln6_fu_47_p0");
    sc_trace(mVcdFile, and_ln11_fu_53_p0, "and_ln11_fu_53_p0");
    sc_trace(mVcdFile, xor_ln6_fu_47_p2, "xor_ln6_fu_47_p2");
#endif

    }
    mHdltvinHandle.open("automatic_inlining.hdltvin.dat");
    mHdltvoutHandle.open("automatic_inlining.hdltvout.dat");
}

automatic_inlining::~automatic_inlining() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void automatic_inlining::thread_and_ln11_fu_53_p0() {
    and_ln11_fu_53_p0 =  (sc_lv<1>) (b.read());
}

void automatic_inlining::thread_c() {
    c =  (sc_logic) ((and_ln11_fu_53_p0.read() & xor_ln6_fu_47_p2.read()))[0];
}

void automatic_inlining::thread_xor_ln6_fu_47_p0() {
    xor_ln6_fu_47_p0 =  (sc_lv<1>) (a.read());
}

void automatic_inlining::thread_xor_ln6_fu_47_p2() {
    xor_ln6_fu_47_p2 = (xor_ln6_fu_47_p0.read() ^ ap_const_lv1_1);
}

void automatic_inlining::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

