#include "xgpio.h"
#include "xgpio_l.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xscugic.h"
#include "xstatus.h"

class gpio_handler {
private:
  XGpio_Config *config_;
  XGpio gpio_;
  u32 channel_;
  XScuGic_Config *irq_config_;
  XScuGic irq_;
  u32 irq_channel_mask_;

public:
  gpio_handler()
      : config_(nullptr), irq_config_(nullptr), irq_channel_mask_(0) {
    memset(&gpio_, 0x00, sizeof(gpio_));
  }
  int init(u32 deviceID, u8 channel, u32 direction_mask);
  template <typename irq_fn>
  int init_irq(u8 irq_deviceID, u32 farbric_irq_num, irq_fn func,
               u32 irq_channel_mask);
  inline u32 read() { return XGpio_DiscreteRead(&gpio_, channel_); }
  inline void write(const u32 &data) {
    XGpio_DiscreteWrite(&gpio_, channel_, data);
  }
  inline void write_toggle(u32 toggle_mask) {
    XGpio_DiscreteWrite(&gpio_, channel_, read() ^ toggle_mask);
  }
  inline void disable_irq() {
    XGpio_InterruptDisable(&gpio_, irq_channel_mask_);
  }
  inline void enable_irq() { XGpio_InterruptEnable(&gpio_, irq_channel_mask_); }
  inline void clear_irq() { XGpio_InterruptClear(&gpio_, irq_channel_mask_); }
  inline u32 get_irq_status() { return XGpio_InterruptGetStatus(&gpio_); }

  inline u32 irq_channel_mask() { return irq_channel_mask_; }
};
