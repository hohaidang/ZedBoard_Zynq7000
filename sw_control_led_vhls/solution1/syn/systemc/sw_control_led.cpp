// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sw_control_led.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool sw_control_led::ap_const_boolean_1 = true;
const sc_logic sw_control_led::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sw_control_led::ap_const_logic_0 = sc_dt::Log_0;

sw_control_led::sw_control_led(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_outputs);
    sensitive << ( inputs );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sw_control_led_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, inputs, "(port)inputs");
    sc_trace(mVcdFile, outputs, "(port)outputs");
#endif

    }
    mHdltvinHandle.open("sw_control_led.hdltvin.dat");
    mHdltvoutHandle.open("sw_control_led.hdltvout.dat");
}

sw_control_led::~sw_control_led() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void sw_control_led::thread_outputs() {
    outputs = inputs.read();
}

void sw_control_led::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"inputs\" :  \"" << inputs.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"outputs\" :  \"" << outputs.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

