

================================================================
== Vivado HLS Report for 'trafic_light'
================================================================
* Date:           Thu Jan  7 17:46:06 2021

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        trafic_light_vhls_001
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 2.934 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |        0|        0|   0 ns   |   0 ns   |    0|    0|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 0
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 1
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.93>
ST_1 : Operation 2 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %l_sensor) nounwind, !map !13"   --->   Operation 2 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %r_sensor) nounwind, !map !19"   --->   Operation 3 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %u_sensor) nounwind, !map !23"   --->   Operation 4 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1 %d_sensor) nounwind, !map !27"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %ew_light) nounwind, !map !31"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %ns_light) nounwind, !map !37"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([13 x i8]* @trafic_light_str) nounwind"   --->   Operation 8 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%d_sensor_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %d_sensor) nounwind" [trafic_light_vhls_001/trafic_light.cpp:61]   --->   Operation 9 'read' 'd_sensor_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%u_sensor_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %u_sensor) nounwind" [trafic_light_vhls_001/trafic_light.cpp:61]   --->   Operation 10 'read' 'u_sensor_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%r_sensor_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %r_sensor) nounwind" [trafic_light_vhls_001/trafic_light.cpp:61]   --->   Operation 11 'read' 'r_sensor_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%l_sensor_read = call i1 @_ssdm_op_Read.ap_none.i1(i1 %l_sensor) nounwind" [trafic_light_vhls_001/trafic_light.cpp:61]   --->   Operation 12 'read' 'l_sensor_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1* %ns_light, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:67]   --->   Operation 13 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1* %ew_light, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:68]   --->   Operation 14 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %d_sensor, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:69]   --->   Operation 15 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %u_sensor, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:70]   --->   Operation 16 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %r_sensor, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:71]   --->   Operation 17 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i1 %l_sensor, [8 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:72]   --->   Operation 18 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [13 x i8]* @p_str2, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:73]   --->   Operation 19 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.97ns)   --->   "%ew_rule_1 = and i1 %l_sensor_read, %r_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:10->trafic_light_vhls_001/trafic_light.cpp:75]   --->   Operation 20 'and' 'ew_rule_1' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 21 [1/1] (0.00ns) (grouped into LUT with out node or_ln81_1)   --->   "%xor_ln22 = xor i1 %l_sensor_read, %r_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:22->trafic_light_vhls_001/trafic_light.cpp:76]   --->   Operation 21 'xor' 'xor_ln22' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 22 [1/1] (0.97ns)   --->   "%and_ln22 = and i1 %u_sensor_read, %d_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:22->trafic_light_vhls_001/trafic_light.cpp:76]   --->   Operation 22 'and' 'and_ln22' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 23 [1/1] (0.00ns) (grouped into LUT with out node or_ln81_1)   --->   "%xor_ln22_1 = xor i1 %and_ln22, true" [trafic_light_vhls_001/trafic_light.cpp:22->trafic_light_vhls_001/trafic_light.cpp:76]   --->   Operation 23 'xor' 'xor_ln22_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 24 [1/1] (0.00ns) (grouped into LUT with out node or_ln81_1)   --->   "%ew_rule_2 = and i1 %xor_ln22, %xor_ln22_1" [trafic_light_vhls_001/trafic_light.cpp:22->trafic_light_vhls_001/trafic_light.cpp:76]   --->   Operation 24 'and' 'ew_rule_2' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 25 [1/1] (0.00ns) (grouped into LUT with out node or_ln82)   --->   "%xor_ln34 = xor i1 %ew_rule_1, true" [trafic_light_vhls_001/trafic_light.cpp:34->trafic_light_vhls_001/trafic_light.cpp:77]   --->   Operation 25 'xor' 'xor_ln34' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 26 [1/1] (0.00ns) (grouped into LUT with out node or_ln82)   --->   "%ns_rule_3 = and i1 %and_ln22, %xor_ln34" [trafic_light_vhls_001/trafic_light.cpp:34->trafic_light_vhls_001/trafic_light.cpp:77]   --->   Operation 26 'and' 'ns_rule_3' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 27 [1/1] (0.00ns) (grouped into LUT with out node or_ln82)   --->   "%xor_ln46 = xor i1 %u_sensor_read, %d_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:46->trafic_light_vhls_001/trafic_light.cpp:78]   --->   Operation 27 'xor' 'xor_ln46' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 28 [1/1] (0.97ns)   --->   "%or_ln54 = or i1 %r_sensor_read, %l_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:54->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 28 'or' 'or_ln54' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 29 [1/1] (0.00ns) (grouped into LUT with out node or_ln82)   --->   "%xor_ln54 = xor i1 %or_ln54, true" [trafic_light_vhls_001/trafic_light.cpp:54->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 29 'xor' 'xor_ln54' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 30 [1/1] (0.00ns) (grouped into LUT with out node or_ln82)   --->   "%ns_rule_4 = and i1 %xor_ln46, %xor_ln54" [trafic_light_vhls_001/trafic_light.cpp:54->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 30 'and' 'ns_rule_4' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 31 [1/1] (0.00ns) (grouped into LUT with out node or_ln81)   --->   "%or_ln58 = or i1 %d_sensor_read, %u_sensor_read" [trafic_light_vhls_001/trafic_light.cpp:58->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 31 'or' 'or_ln58' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 32 [1/1] (0.00ns) (grouped into LUT with out node or_ln81)   --->   "%or_ln58_1 = or i1 %or_ln58, %or_ln54" [trafic_light_vhls_001/trafic_light.cpp:58->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 32 'or' 'or_ln58_1' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 33 [1/1] (0.00ns) (grouped into LUT with out node or_ln81)   --->   "%ew_rule_5 = xor i1 %or_ln58_1, true" [trafic_light_vhls_001/trafic_light.cpp:58->trafic_light_vhls_001/trafic_light.cpp:79]   --->   Operation 33 'xor' 'ew_rule_5' <Predicate = true> <Delay = 0.00> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 34 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln81 = or i1 %ew_rule_1, %ew_rule_5" [trafic_light_vhls_001/trafic_light.cpp:81]   --->   Operation 34 'or' 'or_ln81' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 35 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln81_1 = or i1 %or_ln81, %ew_rule_2" [trafic_light_vhls_001/trafic_light.cpp:81]   --->   Operation 35 'or' 'or_ln81_1' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i1P(i1* %ew_light, i1 %or_ln81_1) nounwind" [trafic_light_vhls_001/trafic_light.cpp:81]   --->   Operation 36 'write' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.97ns) (out node of the LUT)   --->   "%or_ln82 = or i1 %ns_rule_3, %ns_rule_4" [trafic_light_vhls_001/trafic_light.cpp:82]   --->   Operation 37 'or' 'or_ln82' <Predicate = true> <Delay = 0.97> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.97> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_none.i1P(i1* %ns_light, i1 %or_ln82) nounwind" [trafic_light_vhls_001/trafic_light.cpp:82]   --->   Operation 38 'write' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "ret void" [trafic_light_vhls_001/trafic_light.cpp:83]   --->   Operation 39 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Binding
============================================================
STG Binding: 
---------------- STG Properties BEGIN ----------------
- Is combinational: 1
- Is one-state seq: 0
- Is datapath-only: 0
- Is pipelined: 0
- Is top level: 1
Port [ Return ] is wired: 1; IO mode=ap_ctrl_none:ce=0
Port [ l_sensor]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=0; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
Port [ r_sensor]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=0; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
Port [ u_sensor]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=0; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
Port [ d_sensor]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=0; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
Port [ ew_light]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=1; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
Port [ ns_light]:  wired=1; compound=0; hidden=0; nouse=0; global=0; static=0; extern=0; dir=1; type=0; pingpong=0; private_global=0; IO mode=ap_none:ce=0
---------------- STG Properties END ------------------

---------------- Datapath Model BEGIN ----------------

<LifeTime>
<method=bitvector/>
specbitsmap_ln0    (specbitsmap  ) [ 00]
specbitsmap_ln0    (specbitsmap  ) [ 00]
specbitsmap_ln0    (specbitsmap  ) [ 00]
specbitsmap_ln0    (specbitsmap  ) [ 00]
specbitsmap_ln0    (specbitsmap  ) [ 00]
specbitsmap_ln0    (specbitsmap  ) [ 00]
spectopmodule_ln0  (spectopmodule) [ 00]
d_sensor_read      (read         ) [ 00]
u_sensor_read      (read         ) [ 00]
r_sensor_read      (read         ) [ 00]
l_sensor_read      (read         ) [ 00]
specinterface_ln67 (specinterface) [ 00]
specinterface_ln68 (specinterface) [ 00]
specinterface_ln69 (specinterface) [ 00]
specinterface_ln70 (specinterface) [ 00]
specinterface_ln71 (specinterface) [ 00]
specinterface_ln72 (specinterface) [ 00]
specinterface_ln73 (specinterface) [ 00]
ew_rule_1          (and          ) [ 00]
xor_ln22           (xor          ) [ 00]
and_ln22           (and          ) [ 00]
xor_ln22_1         (xor          ) [ 00]
ew_rule_2          (and          ) [ 00]
xor_ln34           (xor          ) [ 00]
ns_rule_3          (and          ) [ 00]
xor_ln46           (xor          ) [ 00]
or_ln54            (or           ) [ 00]
xor_ln54           (xor          ) [ 00]
ns_rule_4          (and          ) [ 00]
or_ln58            (or           ) [ 00]
or_ln58_1          (or           ) [ 00]
ew_rule_5          (xor          ) [ 00]
or_ln81            (or           ) [ 00]
or_ln81_1          (or           ) [ 00]
write_ln81         (write        ) [ 00]
or_ln82            (or           ) [ 00]
write_ln82         (write        ) [ 00]
ret_ln83           (ret          ) [ 00]
</LifeTime>

<model>

<comp_list>
<comp id="0" class="1000" name="l_sensor">
<pin_list>
<pin id="1" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="l_sensor"/></StgValue>
</bind>
</comp>

<comp id="2" class="1000" name="r_sensor">
<pin_list>
<pin id="3" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="r_sensor"/></StgValue>
</bind>
</comp>

<comp id="4" class="1000" name="u_sensor">
<pin_list>
<pin id="5" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="u_sensor"/></StgValue>
</bind>
</comp>

<comp id="6" class="1000" name="d_sensor">
<pin_list>
<pin id="7" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="d_sensor"/></StgValue>
</bind>
</comp>

<comp id="8" class="1000" name="ew_light">
<pin_list>
<pin id="9" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="ew_light"/></StgValue>
</bind>
</comp>

<comp id="10" class="1000" name="ns_light">
<pin_list>
<pin id="11" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="ns_light"/></StgValue>
</bind>
</comp>

<comp id="12" class="1001" name="const_12">
<pin_list>
<pin id="13" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecBitsMap"/></StgValue>
</bind>
</comp>

<comp id="14" class="1001" name="const_14">
<pin_list>
<pin id="15" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecTopModule"/></StgValue>
</bind>
</comp>

<comp id="16" class="1001" name="const_16">
<pin_list>
<pin id="17" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="trafic_light_str"/></StgValue>
</bind>
</comp>

<comp id="18" class="1001" name="const_18">
<pin_list>
<pin id="19" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Read.ap_none.i1"/></StgValue>
</bind>
</comp>

<comp id="20" class="1001" name="const_20">
<pin_list>
<pin id="21" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_SpecInterface"/></StgValue>
</bind>
</comp>

<comp id="22" class="1001" name="const_22">
<pin_list>
<pin id="23" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str"/></StgValue>
</bind>
</comp>

<comp id="24" class="1001" name="const_24">
<pin_list>
<pin id="25" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="26" class="1001" name="const_26">
<pin_list>
<pin id="27" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str1"/></StgValue>
</bind>
</comp>

<comp id="28" class="1001" name="const_28">
<pin_list>
<pin id="29" dir="1" index="0" bw="1" slack="2147483647"/>
</pin_list>
<bind>
<StgValue><ssdm name="p_str2"/></StgValue>
</bind>
</comp>

<comp id="30" class="1001" name="const_30">
<pin_list>
<pin id="31" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name=""/></StgValue>
</bind>
</comp>

<comp id="32" class="1001" name="const_32">
<pin_list>
<pin id="33" dir="1" index="0" bw="1" slack="0"/>
</pin_list>
<bind>
<StgValue><ssdm name="_ssdm_op_Write.ap_none.i1P"/></StgValue>
</bind>
</comp>

<comp id="34" class="1004" name="d_sensor_read_read_fu_34">
<pin_list>
<pin id="35" dir="0" index="0" bw="1" slack="0"/>
<pin id="36" dir="0" index="1" bw="1" slack="0"/>
<pin id="37" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="d_sensor_read/1 "/>
</bind>
</comp>

<comp id="40" class="1004" name="u_sensor_read_read_fu_40">
<pin_list>
<pin id="41" dir="0" index="0" bw="1" slack="0"/>
<pin id="42" dir="0" index="1" bw="1" slack="0"/>
<pin id="43" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="u_sensor_read/1 "/>
</bind>
</comp>

<comp id="46" class="1004" name="r_sensor_read_read_fu_46">
<pin_list>
<pin id="47" dir="0" index="0" bw="1" slack="0"/>
<pin id="48" dir="0" index="1" bw="1" slack="0"/>
<pin id="49" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="r_sensor_read/1 "/>
</bind>
</comp>

<comp id="52" class="1004" name="l_sensor_read_read_fu_52">
<pin_list>
<pin id="53" dir="0" index="0" bw="1" slack="0"/>
<pin id="54" dir="0" index="1" bw="1" slack="0"/>
<pin id="55" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="read(1150) " fcode="read"/>
<opset="l_sensor_read/1 "/>
</bind>
</comp>

<comp id="58" class="1004" name="write_ln81_write_fu_58">
<pin_list>
<pin id="59" dir="0" index="0" bw="0" slack="0"/>
<pin id="60" dir="0" index="1" bw="1" slack="0"/>
<pin id="61" dir="0" index="2" bw="1" slack="0"/>
<pin id="62" dir="1" index="3" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="write_ln81/1 "/>
</bind>
</comp>

<comp id="65" class="1004" name="write_ln82_write_fu_65">
<pin_list>
<pin id="66" dir="0" index="0" bw="0" slack="0"/>
<pin id="67" dir="0" index="1" bw="1" slack="0"/>
<pin id="68" dir="0" index="2" bw="1" slack="0"/>
<pin id="69" dir="1" index="3" bw="0" slack="2147483647"/>
</pin_list>
<bind>
<opcode="write(1151) " fcode="write"/>
<opset="write_ln82/1 "/>
</bind>
</comp>

<comp id="72" class="1004" name="ew_rule_1_fu_72">
<pin_list>
<pin id="73" dir="0" index="0" bw="1" slack="0"/>
<pin id="74" dir="0" index="1" bw="1" slack="0"/>
<pin id="75" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="and(23) " fcode="and"/>
<opset="ew_rule_1/1 "/>
</bind>
</comp>

<comp id="78" class="1004" name="xor_ln22_fu_78">
<pin_list>
<pin id="79" dir="0" index="0" bw="1" slack="0"/>
<pin id="80" dir="0" index="1" bw="1" slack="0"/>
<pin id="81" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="xor_ln22/1 "/>
</bind>
</comp>

<comp id="84" class="1004" name="and_ln22_fu_84">
<pin_list>
<pin id="85" dir="0" index="0" bw="1" slack="0"/>
<pin id="86" dir="0" index="1" bw="1" slack="0"/>
<pin id="87" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="and(23) " fcode="and"/>
<opset="and_ln22/1 "/>
</bind>
</comp>

<comp id="90" class="1004" name="xor_ln22_1_fu_90">
<pin_list>
<pin id="91" dir="0" index="0" bw="1" slack="0"/>
<pin id="92" dir="0" index="1" bw="1" slack="0"/>
<pin id="93" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="xor_ln22_1/1 "/>
</bind>
</comp>

<comp id="96" class="1004" name="ew_rule_2_fu_96">
<pin_list>
<pin id="97" dir="0" index="0" bw="1" slack="0"/>
<pin id="98" dir="0" index="1" bw="1" slack="0"/>
<pin id="99" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="and(23) " fcode="and"/>
<opset="ew_rule_2/1 "/>
</bind>
</comp>

<comp id="102" class="1004" name="xor_ln34_fu_102">
<pin_list>
<pin id="103" dir="0" index="0" bw="1" slack="0"/>
<pin id="104" dir="0" index="1" bw="1" slack="0"/>
<pin id="105" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="xor_ln34/1 "/>
</bind>
</comp>

<comp id="108" class="1004" name="ns_rule_3_fu_108">
<pin_list>
<pin id="109" dir="0" index="0" bw="1" slack="0"/>
<pin id="110" dir="0" index="1" bw="1" slack="0"/>
<pin id="111" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="and(23) " fcode="and"/>
<opset="ns_rule_3/1 "/>
</bind>
</comp>

<comp id="114" class="1004" name="xor_ln46_fu_114">
<pin_list>
<pin id="115" dir="0" index="0" bw="1" slack="0"/>
<pin id="116" dir="0" index="1" bw="1" slack="0"/>
<pin id="117" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="xor_ln46/1 "/>
</bind>
</comp>

<comp id="120" class="1004" name="or_ln54_fu_120">
<pin_list>
<pin id="121" dir="0" index="0" bw="1" slack="0"/>
<pin id="122" dir="0" index="1" bw="1" slack="0"/>
<pin id="123" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln54/1 "/>
</bind>
</comp>

<comp id="126" class="1004" name="xor_ln54_fu_126">
<pin_list>
<pin id="127" dir="0" index="0" bw="1" slack="0"/>
<pin id="128" dir="0" index="1" bw="1" slack="0"/>
<pin id="129" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="xor_ln54/1 "/>
</bind>
</comp>

<comp id="132" class="1004" name="ns_rule_4_fu_132">
<pin_list>
<pin id="133" dir="0" index="0" bw="1" slack="0"/>
<pin id="134" dir="0" index="1" bw="1" slack="0"/>
<pin id="135" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="and(23) " fcode="and"/>
<opset="ns_rule_4/1 "/>
</bind>
</comp>

<comp id="138" class="1004" name="or_ln58_fu_138">
<pin_list>
<pin id="139" dir="0" index="0" bw="1" slack="0"/>
<pin id="140" dir="0" index="1" bw="1" slack="0"/>
<pin id="141" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln58/1 "/>
</bind>
</comp>

<comp id="144" class="1004" name="or_ln58_1_fu_144">
<pin_list>
<pin id="145" dir="0" index="0" bw="1" slack="0"/>
<pin id="146" dir="0" index="1" bw="1" slack="0"/>
<pin id="147" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln58_1/1 "/>
</bind>
</comp>

<comp id="150" class="1004" name="ew_rule_5_fu_150">
<pin_list>
<pin id="151" dir="0" index="0" bw="1" slack="0"/>
<pin id="152" dir="0" index="1" bw="1" slack="0"/>
<pin id="153" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="xor(25) " fcode="xor"/>
<opset="ew_rule_5/1 "/>
</bind>
</comp>

<comp id="156" class="1004" name="or_ln81_fu_156">
<pin_list>
<pin id="157" dir="0" index="0" bw="1" slack="0"/>
<pin id="158" dir="0" index="1" bw="1" slack="0"/>
<pin id="159" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln81/1 "/>
</bind>
</comp>

<comp id="162" class="1004" name="or_ln81_1_fu_162">
<pin_list>
<pin id="163" dir="0" index="0" bw="1" slack="0"/>
<pin id="164" dir="0" index="1" bw="1" slack="0"/>
<pin id="165" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln81_1/1 "/>
</bind>
</comp>

<comp id="169" class="1004" name="or_ln82_fu_169">
<pin_list>
<pin id="170" dir="0" index="0" bw="1" slack="0"/>
<pin id="171" dir="0" index="1" bw="1" slack="0"/>
<pin id="172" dir="1" index="2" bw="1" slack="0"/>
</pin_list>
<bind>
<opcode="or(24) " fcode="or"/>
<opset="or_ln82/1 "/>
</bind>
</comp>

</comp_list>

<net_list>
<net id="38"><net_src comp="18" pin="0"/><net_sink comp="34" pin=0"/></net>

<net id="39"><net_src comp="6" pin="0"/><net_sink comp="34" pin=1"/></net>

<net id="44"><net_src comp="18" pin="0"/><net_sink comp="40" pin=0"/></net>

<net id="45"><net_src comp="4" pin="0"/><net_sink comp="40" pin=1"/></net>

<net id="50"><net_src comp="18" pin="0"/><net_sink comp="46" pin=0"/></net>

<net id="51"><net_src comp="2" pin="0"/><net_sink comp="46" pin=1"/></net>

<net id="56"><net_src comp="18" pin="0"/><net_sink comp="52" pin=0"/></net>

<net id="57"><net_src comp="0" pin="0"/><net_sink comp="52" pin=1"/></net>

<net id="63"><net_src comp="32" pin="0"/><net_sink comp="58" pin=0"/></net>

<net id="64"><net_src comp="8" pin="0"/><net_sink comp="58" pin=1"/></net>

<net id="70"><net_src comp="32" pin="0"/><net_sink comp="65" pin=0"/></net>

<net id="71"><net_src comp="10" pin="0"/><net_sink comp="65" pin=1"/></net>

<net id="76"><net_src comp="52" pin="2"/><net_sink comp="72" pin=0"/></net>

<net id="77"><net_src comp="46" pin="2"/><net_sink comp="72" pin=1"/></net>

<net id="82"><net_src comp="52" pin="2"/><net_sink comp="78" pin=0"/></net>

<net id="83"><net_src comp="46" pin="2"/><net_sink comp="78" pin=1"/></net>

<net id="88"><net_src comp="40" pin="2"/><net_sink comp="84" pin=0"/></net>

<net id="89"><net_src comp="34" pin="2"/><net_sink comp="84" pin=1"/></net>

<net id="94"><net_src comp="84" pin="2"/><net_sink comp="90" pin=0"/></net>

<net id="95"><net_src comp="30" pin="0"/><net_sink comp="90" pin=1"/></net>

<net id="100"><net_src comp="78" pin="2"/><net_sink comp="96" pin=0"/></net>

<net id="101"><net_src comp="90" pin="2"/><net_sink comp="96" pin=1"/></net>

<net id="106"><net_src comp="72" pin="2"/><net_sink comp="102" pin=0"/></net>

<net id="107"><net_src comp="30" pin="0"/><net_sink comp="102" pin=1"/></net>

<net id="112"><net_src comp="84" pin="2"/><net_sink comp="108" pin=0"/></net>

<net id="113"><net_src comp="102" pin="2"/><net_sink comp="108" pin=1"/></net>

<net id="118"><net_src comp="40" pin="2"/><net_sink comp="114" pin=0"/></net>

<net id="119"><net_src comp="34" pin="2"/><net_sink comp="114" pin=1"/></net>

<net id="124"><net_src comp="46" pin="2"/><net_sink comp="120" pin=0"/></net>

<net id="125"><net_src comp="52" pin="2"/><net_sink comp="120" pin=1"/></net>

<net id="130"><net_src comp="120" pin="2"/><net_sink comp="126" pin=0"/></net>

<net id="131"><net_src comp="30" pin="0"/><net_sink comp="126" pin=1"/></net>

<net id="136"><net_src comp="114" pin="2"/><net_sink comp="132" pin=0"/></net>

<net id="137"><net_src comp="126" pin="2"/><net_sink comp="132" pin=1"/></net>

<net id="142"><net_src comp="34" pin="2"/><net_sink comp="138" pin=0"/></net>

<net id="143"><net_src comp="40" pin="2"/><net_sink comp="138" pin=1"/></net>

<net id="148"><net_src comp="138" pin="2"/><net_sink comp="144" pin=0"/></net>

<net id="149"><net_src comp="120" pin="2"/><net_sink comp="144" pin=1"/></net>

<net id="154"><net_src comp="144" pin="2"/><net_sink comp="150" pin=0"/></net>

<net id="155"><net_src comp="30" pin="0"/><net_sink comp="150" pin=1"/></net>

<net id="160"><net_src comp="72" pin="2"/><net_sink comp="156" pin=0"/></net>

<net id="161"><net_src comp="150" pin="2"/><net_sink comp="156" pin=1"/></net>

<net id="166"><net_src comp="156" pin="2"/><net_sink comp="162" pin=0"/></net>

<net id="167"><net_src comp="96" pin="2"/><net_sink comp="162" pin=1"/></net>

<net id="168"><net_src comp="162" pin="2"/><net_sink comp="58" pin=2"/></net>

<net id="173"><net_src comp="108" pin="2"/><net_sink comp="169" pin=0"/></net>

<net id="174"><net_src comp="132" pin="2"/><net_sink comp="169" pin=1"/></net>

<net id="175"><net_src comp="169" pin="2"/><net_sink comp="65" pin=2"/></net>

</net_list>

</model> 
---------------- Datapath Model END ------------------

* FSMD analyzer results:
  - Output states:
	Port: ew_light | {1 }
	Port: ns_light | {1 }
 - Input state : 
	Port: trafic_light : l_sensor | {1 }
	Port: trafic_light : r_sensor | {1 }
	Port: trafic_light : u_sensor | {1 }
	Port: trafic_light : d_sensor | {1 }
  - Chain level:
	State 1


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================

* Functional unit list:
|----------|--------------------------|---------|---------|
| Operation|      Functional Unit     |    FF   |   LUT   |
|----------|--------------------------|---------|---------|
|          |      xor_ln22_fu_78      |    0    |    2    |
|          |     xor_ln22_1_fu_90     |    0    |    2    |
|    xor   |      xor_ln34_fu_102     |    0    |    2    |
|          |      xor_ln46_fu_114     |    0    |    2    |
|          |      xor_ln54_fu_126     |    0    |    2    |
|          |     ew_rule_5_fu_150     |    0    |    2    |
|----------|--------------------------|---------|---------|
|          |      or_ln54_fu_120      |    0    |    2    |
|          |      or_ln58_fu_138      |    0    |    2    |
|    or    |     or_ln58_1_fu_144     |    0    |    2    |
|          |      or_ln81_fu_156      |    0    |    2    |
|          |     or_ln81_1_fu_162     |    0    |    2    |
|          |      or_ln82_fu_169      |    0    |    2    |
|----------|--------------------------|---------|---------|
|          |      ew_rule_1_fu_72     |    0    |    2    |
|          |      and_ln22_fu_84      |    0    |    2    |
|    and   |      ew_rule_2_fu_96     |    0    |    2    |
|          |     ns_rule_3_fu_108     |    0    |    2    |
|          |     ns_rule_4_fu_132     |    0    |    2    |
|----------|--------------------------|---------|---------|
|          | d_sensor_read_read_fu_34 |    0    |    0    |
|   read   | u_sensor_read_read_fu_40 |    0    |    0    |
|          | r_sensor_read_read_fu_46 |    0    |    0    |
|          | l_sensor_read_read_fu_52 |    0    |    0    |
|----------|--------------------------|---------|---------|
|   write  |  write_ln81_write_fu_58  |    0    |    0    |
|          |  write_ln82_write_fu_65  |    0    |    0    |
|----------|--------------------------|---------|---------|
|   Total  |                          |    0    |    34   |
|----------|--------------------------|---------|---------|

Memories:
N/A

* Register list:
N/A

* Multiplexer (MUX) list: 
|--------|------|------|------|--------|
|  Comp  |  Pin | Size |  BW  | S x BW |
|--------|------|------|------|--------|
|  Total |      |      |      |    0   |
|--------|------|------|------|--------|



* Summary:
+-----------+--------+--------+
|           |   FF   |   LUT  |
+-----------+--------+--------+
|  Function |    0   |   34   |
|   Memory  |    -   |    -   |
|Multiplexer|    -   |    -   |
|  Register |    -   |    -   |
+-----------+--------+--------+
|   Total   |    0   |   34   |
+-----------+--------+--------+
