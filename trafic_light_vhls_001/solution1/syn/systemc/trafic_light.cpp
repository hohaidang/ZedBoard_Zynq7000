// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "trafic_light.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool trafic_light::ap_const_boolean_1 = true;
const sc_lv<1> trafic_light::ap_const_lv1_1 = "1";
const sc_logic trafic_light::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic trafic_light::ap_const_logic_0 = sc_dt::Log_0;

trafic_light::trafic_light(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln22_fu_84_p0);
    sensitive << ( u_sensor );

    SC_METHOD(thread_and_ln22_fu_84_p1);
    sensitive << ( d_sensor );

    SC_METHOD(thread_and_ln22_fu_84_p2);
    sensitive << ( and_ln22_fu_84_p0 );
    sensitive << ( and_ln22_fu_84_p1 );

    SC_METHOD(thread_ew_light);
    sensitive << ( or_ln81_fu_156_p2 );
    sensitive << ( ew_rule_2_fu_96_p2 );

    SC_METHOD(thread_ew_rule_1_fu_72_p0);
    sensitive << ( l_sensor );

    SC_METHOD(thread_ew_rule_1_fu_72_p1);
    sensitive << ( r_sensor );

    SC_METHOD(thread_ew_rule_1_fu_72_p2);
    sensitive << ( ew_rule_1_fu_72_p0 );
    sensitive << ( ew_rule_1_fu_72_p1 );

    SC_METHOD(thread_ew_rule_2_fu_96_p2);
    sensitive << ( xor_ln22_fu_78_p2 );
    sensitive << ( xor_ln22_1_fu_90_p2 );

    SC_METHOD(thread_ew_rule_5_fu_150_p2);
    sensitive << ( or_ln58_1_fu_144_p2 );

    SC_METHOD(thread_ns_light);
    sensitive << ( ns_rule_3_fu_108_p2 );
    sensitive << ( ns_rule_4_fu_132_p2 );

    SC_METHOD(thread_ns_rule_3_fu_108_p2);
    sensitive << ( and_ln22_fu_84_p2 );
    sensitive << ( xor_ln34_fu_102_p2 );

    SC_METHOD(thread_ns_rule_4_fu_132_p2);
    sensitive << ( xor_ln46_fu_114_p2 );
    sensitive << ( xor_ln54_fu_126_p2 );

    SC_METHOD(thread_or_ln54_fu_120_p0);
    sensitive << ( r_sensor );

    SC_METHOD(thread_or_ln54_fu_120_p1);
    sensitive << ( l_sensor );

    SC_METHOD(thread_or_ln54_fu_120_p2);
    sensitive << ( or_ln54_fu_120_p0 );
    sensitive << ( or_ln54_fu_120_p1 );

    SC_METHOD(thread_or_ln58_1_fu_144_p2);
    sensitive << ( or_ln54_fu_120_p2 );
    sensitive << ( or_ln58_fu_138_p2 );

    SC_METHOD(thread_or_ln58_fu_138_p0);
    sensitive << ( d_sensor );

    SC_METHOD(thread_or_ln58_fu_138_p1);
    sensitive << ( u_sensor );

    SC_METHOD(thread_or_ln58_fu_138_p2);
    sensitive << ( or_ln58_fu_138_p0 );
    sensitive << ( or_ln58_fu_138_p1 );

    SC_METHOD(thread_or_ln81_fu_156_p2);
    sensitive << ( ew_rule_1_fu_72_p2 );
    sensitive << ( ew_rule_5_fu_150_p2 );

    SC_METHOD(thread_xor_ln22_1_fu_90_p2);
    sensitive << ( and_ln22_fu_84_p2 );

    SC_METHOD(thread_xor_ln22_fu_78_p0);
    sensitive << ( l_sensor );

    SC_METHOD(thread_xor_ln22_fu_78_p1);
    sensitive << ( r_sensor );

    SC_METHOD(thread_xor_ln22_fu_78_p2);
    sensitive << ( xor_ln22_fu_78_p0 );
    sensitive << ( xor_ln22_fu_78_p1 );

    SC_METHOD(thread_xor_ln34_fu_102_p2);
    sensitive << ( ew_rule_1_fu_72_p2 );

    SC_METHOD(thread_xor_ln46_fu_114_p0);
    sensitive << ( u_sensor );

    SC_METHOD(thread_xor_ln46_fu_114_p1);
    sensitive << ( d_sensor );

    SC_METHOD(thread_xor_ln46_fu_114_p2);
    sensitive << ( xor_ln46_fu_114_p0 );
    sensitive << ( xor_ln46_fu_114_p1 );

    SC_METHOD(thread_xor_ln54_fu_126_p2);
    sensitive << ( or_ln54_fu_120_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "trafic_light_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, l_sensor, "(port)l_sensor");
    sc_trace(mVcdFile, r_sensor, "(port)r_sensor");
    sc_trace(mVcdFile, u_sensor, "(port)u_sensor");
    sc_trace(mVcdFile, d_sensor, "(port)d_sensor");
    sc_trace(mVcdFile, ew_light, "(port)ew_light");
    sc_trace(mVcdFile, ns_light, "(port)ns_light");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ew_rule_1_fu_72_p0, "ew_rule_1_fu_72_p0");
    sc_trace(mVcdFile, ew_rule_1_fu_72_p1, "ew_rule_1_fu_72_p1");
    sc_trace(mVcdFile, xor_ln22_fu_78_p0, "xor_ln22_fu_78_p0");
    sc_trace(mVcdFile, xor_ln22_fu_78_p1, "xor_ln22_fu_78_p1");
    sc_trace(mVcdFile, and_ln22_fu_84_p0, "and_ln22_fu_84_p0");
    sc_trace(mVcdFile, and_ln22_fu_84_p1, "and_ln22_fu_84_p1");
    sc_trace(mVcdFile, and_ln22_fu_84_p2, "and_ln22_fu_84_p2");
    sc_trace(mVcdFile, xor_ln22_fu_78_p2, "xor_ln22_fu_78_p2");
    sc_trace(mVcdFile, xor_ln22_1_fu_90_p2, "xor_ln22_1_fu_90_p2");
    sc_trace(mVcdFile, ew_rule_1_fu_72_p2, "ew_rule_1_fu_72_p2");
    sc_trace(mVcdFile, xor_ln34_fu_102_p2, "xor_ln34_fu_102_p2");
    sc_trace(mVcdFile, xor_ln46_fu_114_p0, "xor_ln46_fu_114_p0");
    sc_trace(mVcdFile, xor_ln46_fu_114_p1, "xor_ln46_fu_114_p1");
    sc_trace(mVcdFile, or_ln54_fu_120_p0, "or_ln54_fu_120_p0");
    sc_trace(mVcdFile, or_ln54_fu_120_p1, "or_ln54_fu_120_p1");
    sc_trace(mVcdFile, or_ln54_fu_120_p2, "or_ln54_fu_120_p2");
    sc_trace(mVcdFile, xor_ln46_fu_114_p2, "xor_ln46_fu_114_p2");
    sc_trace(mVcdFile, xor_ln54_fu_126_p2, "xor_ln54_fu_126_p2");
    sc_trace(mVcdFile, or_ln58_fu_138_p0, "or_ln58_fu_138_p0");
    sc_trace(mVcdFile, or_ln58_fu_138_p1, "or_ln58_fu_138_p1");
    sc_trace(mVcdFile, or_ln58_fu_138_p2, "or_ln58_fu_138_p2");
    sc_trace(mVcdFile, or_ln58_1_fu_144_p2, "or_ln58_1_fu_144_p2");
    sc_trace(mVcdFile, ew_rule_5_fu_150_p2, "ew_rule_5_fu_150_p2");
    sc_trace(mVcdFile, or_ln81_fu_156_p2, "or_ln81_fu_156_p2");
    sc_trace(mVcdFile, ew_rule_2_fu_96_p2, "ew_rule_2_fu_96_p2");
    sc_trace(mVcdFile, ns_rule_3_fu_108_p2, "ns_rule_3_fu_108_p2");
    sc_trace(mVcdFile, ns_rule_4_fu_132_p2, "ns_rule_4_fu_132_p2");
#endif

    }
    mHdltvinHandle.open("trafic_light.hdltvin.dat");
    mHdltvoutHandle.open("trafic_light.hdltvout.dat");
}

trafic_light::~trafic_light() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void trafic_light::thread_and_ln22_fu_84_p0() {
    and_ln22_fu_84_p0 =  (sc_lv<1>) (u_sensor.read());
}

void trafic_light::thread_and_ln22_fu_84_p1() {
    and_ln22_fu_84_p1 =  (sc_lv<1>) (d_sensor.read());
}

void trafic_light::thread_and_ln22_fu_84_p2() {
    and_ln22_fu_84_p2 = (and_ln22_fu_84_p0.read() & and_ln22_fu_84_p1.read());
}

void trafic_light::thread_ew_light() {
    ew_light =  (sc_logic) ((or_ln81_fu_156_p2.read() | ew_rule_2_fu_96_p2.read()))[0];
}

void trafic_light::thread_ew_rule_1_fu_72_p0() {
    ew_rule_1_fu_72_p0 =  (sc_lv<1>) (l_sensor.read());
}

void trafic_light::thread_ew_rule_1_fu_72_p1() {
    ew_rule_1_fu_72_p1 =  (sc_lv<1>) (r_sensor.read());
}

void trafic_light::thread_ew_rule_1_fu_72_p2() {
    ew_rule_1_fu_72_p2 = (ew_rule_1_fu_72_p0.read() & ew_rule_1_fu_72_p1.read());
}

void trafic_light::thread_ew_rule_2_fu_96_p2() {
    ew_rule_2_fu_96_p2 = (xor_ln22_fu_78_p2.read() & xor_ln22_1_fu_90_p2.read());
}

void trafic_light::thread_ew_rule_5_fu_150_p2() {
    ew_rule_5_fu_150_p2 = (or_ln58_1_fu_144_p2.read() ^ ap_const_lv1_1);
}

void trafic_light::thread_ns_light() {
    ns_light =  (sc_logic) ((ns_rule_3_fu_108_p2.read() | ns_rule_4_fu_132_p2.read()))[0];
}

void trafic_light::thread_ns_rule_3_fu_108_p2() {
    ns_rule_3_fu_108_p2 = (and_ln22_fu_84_p2.read() & xor_ln34_fu_102_p2.read());
}

void trafic_light::thread_ns_rule_4_fu_132_p2() {
    ns_rule_4_fu_132_p2 = (xor_ln46_fu_114_p2.read() & xor_ln54_fu_126_p2.read());
}

void trafic_light::thread_or_ln54_fu_120_p0() {
    or_ln54_fu_120_p0 =  (sc_lv<1>) (r_sensor.read());
}

void trafic_light::thread_or_ln54_fu_120_p1() {
    or_ln54_fu_120_p1 =  (sc_lv<1>) (l_sensor.read());
}

void trafic_light::thread_or_ln54_fu_120_p2() {
    or_ln54_fu_120_p2 = (or_ln54_fu_120_p0.read() | or_ln54_fu_120_p1.read());
}

void trafic_light::thread_or_ln58_1_fu_144_p2() {
    or_ln58_1_fu_144_p2 = (or_ln58_fu_138_p2.read() | or_ln54_fu_120_p2.read());
}

void trafic_light::thread_or_ln58_fu_138_p0() {
    or_ln58_fu_138_p0 =  (sc_lv<1>) (d_sensor.read());
}

void trafic_light::thread_or_ln58_fu_138_p1() {
    or_ln58_fu_138_p1 =  (sc_lv<1>) (u_sensor.read());
}

void trafic_light::thread_or_ln58_fu_138_p2() {
    or_ln58_fu_138_p2 = (or_ln58_fu_138_p0.read() | or_ln58_fu_138_p1.read());
}

void trafic_light::thread_or_ln81_fu_156_p2() {
    or_ln81_fu_156_p2 = (ew_rule_1_fu_72_p2.read() | ew_rule_5_fu_150_p2.read());
}

void trafic_light::thread_xor_ln22_1_fu_90_p2() {
    xor_ln22_1_fu_90_p2 = (and_ln22_fu_84_p2.read() ^ ap_const_lv1_1);
}

void trafic_light::thread_xor_ln22_fu_78_p0() {
    xor_ln22_fu_78_p0 =  (sc_lv<1>) (l_sensor.read());
}

void trafic_light::thread_xor_ln22_fu_78_p1() {
    xor_ln22_fu_78_p1 =  (sc_lv<1>) (r_sensor.read());
}

void trafic_light::thread_xor_ln22_fu_78_p2() {
    xor_ln22_fu_78_p2 = (xor_ln22_fu_78_p0.read() ^ xor_ln22_fu_78_p1.read());
}

void trafic_light::thread_xor_ln34_fu_102_p2() {
    xor_ln34_fu_102_p2 = (ew_rule_1_fu_72_p2.read() ^ ap_const_lv1_1);
}

void trafic_light::thread_xor_ln46_fu_114_p0() {
    xor_ln46_fu_114_p0 =  (sc_lv<1>) (u_sensor.read());
}

void trafic_light::thread_xor_ln46_fu_114_p1() {
    xor_ln46_fu_114_p1 =  (sc_lv<1>) (d_sensor.read());
}

void trafic_light::thread_xor_ln46_fu_114_p2() {
    xor_ln46_fu_114_p2 = (xor_ln46_fu_114_p0.read() ^ xor_ln46_fu_114_p1.read());
}

void trafic_light::thread_xor_ln54_fu_126_p2() {
    xor_ln54_fu_126_p2 = (or_ln54_fu_120_p2.read() ^ ap_const_lv1_1);
}

void trafic_light::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"l_sensor\" :  \"" << l_sensor.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"r_sensor\" :  \"" << r_sensor.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"u_sensor\" :  \"" << u_sensor.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d_sensor\" :  \"" << d_sensor.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ew_light\" :  \"" << ew_light.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ns_light\" :  \"" << ns_light.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

