// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _trafic_light_HH_
#define _trafic_light_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct trafic_light : public sc_module {
    // Port declarations 6
    sc_in< sc_logic > l_sensor;
    sc_in< sc_logic > r_sensor;
    sc_in< sc_logic > u_sensor;
    sc_in< sc_logic > d_sensor;
    sc_out< sc_logic > ew_light;
    sc_out< sc_logic > ns_light;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    trafic_light(sc_module_name name);
    SC_HAS_PROCESS(trafic_light);

    ~trafic_light();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > ew_rule_1_fu_72_p0;
    sc_signal< sc_lv<1> > ew_rule_1_fu_72_p1;
    sc_signal< sc_lv<1> > xor_ln22_fu_78_p0;
    sc_signal< sc_lv<1> > xor_ln22_fu_78_p1;
    sc_signal< sc_lv<1> > and_ln22_fu_84_p0;
    sc_signal< sc_lv<1> > and_ln22_fu_84_p1;
    sc_signal< sc_lv<1> > and_ln22_fu_84_p2;
    sc_signal< sc_lv<1> > xor_ln22_fu_78_p2;
    sc_signal< sc_lv<1> > xor_ln22_1_fu_90_p2;
    sc_signal< sc_lv<1> > ew_rule_1_fu_72_p2;
    sc_signal< sc_lv<1> > xor_ln34_fu_102_p2;
    sc_signal< sc_lv<1> > xor_ln46_fu_114_p0;
    sc_signal< sc_lv<1> > xor_ln46_fu_114_p1;
    sc_signal< sc_lv<1> > or_ln54_fu_120_p0;
    sc_signal< sc_lv<1> > or_ln54_fu_120_p1;
    sc_signal< sc_lv<1> > or_ln54_fu_120_p2;
    sc_signal< sc_lv<1> > xor_ln46_fu_114_p2;
    sc_signal< sc_lv<1> > xor_ln54_fu_126_p2;
    sc_signal< sc_lv<1> > or_ln58_fu_138_p0;
    sc_signal< sc_lv<1> > or_ln58_fu_138_p1;
    sc_signal< sc_lv<1> > or_ln58_fu_138_p2;
    sc_signal< sc_lv<1> > or_ln58_1_fu_144_p2;
    sc_signal< sc_lv<1> > ew_rule_5_fu_150_p2;
    sc_signal< sc_lv<1> > or_ln81_fu_156_p2;
    sc_signal< sc_lv<1> > ew_rule_2_fu_96_p2;
    sc_signal< sc_lv<1> > ns_rule_3_fu_108_p2;
    sc_signal< sc_lv<1> > ns_rule_4_fu_132_p2;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_and_ln22_fu_84_p0();
    void thread_and_ln22_fu_84_p1();
    void thread_and_ln22_fu_84_p2();
    void thread_ew_light();
    void thread_ew_rule_1_fu_72_p0();
    void thread_ew_rule_1_fu_72_p1();
    void thread_ew_rule_1_fu_72_p2();
    void thread_ew_rule_2_fu_96_p2();
    void thread_ew_rule_5_fu_150_p2();
    void thread_ns_light();
    void thread_ns_rule_3_fu_108_p2();
    void thread_ns_rule_4_fu_132_p2();
    void thread_or_ln54_fu_120_p0();
    void thread_or_ln54_fu_120_p1();
    void thread_or_ln54_fu_120_p2();
    void thread_or_ln58_1_fu_144_p2();
    void thread_or_ln58_fu_138_p0();
    void thread_or_ln58_fu_138_p1();
    void thread_or_ln58_fu_138_p2();
    void thread_or_ln81_fu_156_p2();
    void thread_xor_ln22_1_fu_90_p2();
    void thread_xor_ln22_fu_78_p0();
    void thread_xor_ln22_fu_78_p1();
    void thread_xor_ln22_fu_78_p2();
    void thread_xor_ln34_fu_102_p2();
    void thread_xor_ln46_fu_114_p0();
    void thread_xor_ln46_fu_114_p1();
    void thread_xor_ln46_fu_114_p2();
    void thread_xor_ln54_fu_126_p2();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
