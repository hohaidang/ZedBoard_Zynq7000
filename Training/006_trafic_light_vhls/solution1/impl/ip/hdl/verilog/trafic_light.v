// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="trafic_light,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.934000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=34,HLS_VERSION=2019_2}" *)

module trafic_light (
        l_sensor,
        r_sensor,
        u_sensor,
        d_sensor,
        ew_light,
        ns_light
);


input   l_sensor;
input   r_sensor;
input   u_sensor;
input   d_sensor;
output   ew_light;
output   ns_light;

wire   [0:0] ew_rule_1_fu_72_p0;
wire   [0:0] ew_rule_1_fu_72_p1;
wire   [0:0] xor_ln22_fu_78_p0;
wire   [0:0] xor_ln22_fu_78_p1;
wire   [0:0] and_ln22_fu_84_p0;
wire   [0:0] and_ln22_fu_84_p1;
wire   [0:0] and_ln22_fu_84_p2;
wire   [0:0] xor_ln22_fu_78_p2;
wire   [0:0] xor_ln22_1_fu_90_p2;
wire   [0:0] ew_rule_1_fu_72_p2;
wire   [0:0] xor_ln34_fu_102_p2;
wire   [0:0] xor_ln46_fu_114_p0;
wire   [0:0] xor_ln46_fu_114_p1;
wire   [0:0] or_ln54_fu_120_p0;
wire   [0:0] or_ln54_fu_120_p1;
wire   [0:0] or_ln54_fu_120_p2;
wire   [0:0] xor_ln46_fu_114_p2;
wire   [0:0] xor_ln54_fu_126_p2;
wire   [0:0] or_ln58_fu_138_p0;
wire   [0:0] or_ln58_fu_138_p1;
wire   [0:0] or_ln58_fu_138_p2;
wire   [0:0] or_ln58_1_fu_144_p2;
wire   [0:0] ew_rule_5_fu_150_p2;
wire   [0:0] or_ln81_fu_156_p2;
wire   [0:0] ew_rule_2_fu_96_p2;
wire   [0:0] ns_rule_3_fu_108_p2;
wire   [0:0] ns_rule_4_fu_132_p2;

assign and_ln22_fu_84_p0 = u_sensor;

assign and_ln22_fu_84_p1 = d_sensor;

assign and_ln22_fu_84_p2 = (and_ln22_fu_84_p1 & and_ln22_fu_84_p0);

assign ew_light = (or_ln81_fu_156_p2 | ew_rule_2_fu_96_p2);

assign ew_rule_1_fu_72_p0 = l_sensor;

assign ew_rule_1_fu_72_p1 = r_sensor;

assign ew_rule_1_fu_72_p2 = (ew_rule_1_fu_72_p1 & ew_rule_1_fu_72_p0);

assign ew_rule_2_fu_96_p2 = (xor_ln22_fu_78_p2 & xor_ln22_1_fu_90_p2);

assign ew_rule_5_fu_150_p2 = (or_ln58_1_fu_144_p2 ^ 1'd1);

assign ns_light = (ns_rule_4_fu_132_p2 | ns_rule_3_fu_108_p2);

assign ns_rule_3_fu_108_p2 = (xor_ln34_fu_102_p2 & and_ln22_fu_84_p2);

assign ns_rule_4_fu_132_p2 = (xor_ln54_fu_126_p2 & xor_ln46_fu_114_p2);

assign or_ln54_fu_120_p0 = r_sensor;

assign or_ln54_fu_120_p1 = l_sensor;

assign or_ln54_fu_120_p2 = (or_ln54_fu_120_p1 | or_ln54_fu_120_p0);

assign or_ln58_1_fu_144_p2 = (or_ln58_fu_138_p2 | or_ln54_fu_120_p2);

assign or_ln58_fu_138_p0 = d_sensor;

assign or_ln58_fu_138_p1 = u_sensor;

assign or_ln58_fu_138_p2 = (or_ln58_fu_138_p1 | or_ln58_fu_138_p0);

assign or_ln81_fu_156_p2 = (ew_rule_5_fu_150_p2 | ew_rule_1_fu_72_p2);

assign xor_ln22_1_fu_90_p2 = (1'd1 ^ and_ln22_fu_84_p2);

assign xor_ln22_fu_78_p0 = l_sensor;

assign xor_ln22_fu_78_p1 = r_sensor;

assign xor_ln22_fu_78_p2 = (xor_ln22_fu_78_p1 ^ xor_ln22_fu_78_p0);

assign xor_ln34_fu_102_p2 = (ew_rule_1_fu_72_p2 ^ 1'd1);

assign xor_ln46_fu_114_p0 = u_sensor;

assign xor_ln46_fu_114_p1 = d_sensor;

assign xor_ln46_fu_114_p2 = (xor_ln46_fu_114_p1 ^ xor_ln46_fu_114_p0);

assign xor_ln54_fu_126_p2 = (or_ln54_fu_120_p2 ^ 1'd1);

endmodule //trafic_light
