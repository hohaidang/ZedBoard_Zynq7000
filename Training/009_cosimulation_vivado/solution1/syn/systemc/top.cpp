// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> top::ap_const_lv32_3 = "11";
const sc_lv<32> top::ap_const_lv32_2 = "10";
const sc_lv<1> top::ap_const_lv1_1 = "1";
const sc_lv<32> top::ap_const_lv32_1 = "1";
const sc_lv<1> top::ap_const_lv1_0 = "0";
const bool top::ap_const_boolean_1 = true;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln8_fu_69_p2);
    sensitive << ( xor_ln8_1_fu_63_p2 );
    sensitive << ( xor_ln8_fu_57_p2 );

    SC_METHOD(thread_and_ln9_1_fu_95_p2);
    sensitive << ( tmp_fu_41_p3 );
    sensitive << ( and_ln9_fu_89_p2 );

    SC_METHOD(thread_and_ln9_2_fu_101_p2);
    sensitive << ( tmp_1_fu_49_p3 );
    sensitive << ( xor_ln8_fu_57_p2 );

    SC_METHOD(thread_and_ln9_fu_89_p2);
    sensitive << ( xor_ln8_1_fu_63_p2 );
    sensitive << ( xor_ln9_fu_83_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_led_V);
    sensitive << ( ap_start );
    sensitive << ( or_ln9_fu_107_p2 );
    sensitive << ( and_ln8_fu_69_p2 );

    SC_METHOD(thread_led_V_ap_vld);
    sensitive << ( ap_start );

    SC_METHOD(thread_or_ln9_fu_107_p2);
    sensitive << ( and_ln9_2_fu_101_p2 );
    sensitive << ( and_ln9_1_fu_95_p2 );

    SC_METHOD(thread_tmp_1_fu_49_p3);
    sensitive << ( sw_V );

    SC_METHOD(thread_tmp_2_fu_75_p3);
    sensitive << ( sw_V );

    SC_METHOD(thread_tmp_fu_41_p3);
    sensitive << ( sw_V );

    SC_METHOD(thread_xor_ln8_1_fu_63_p2);
    sensitive << ( tmp_1_fu_49_p3 );

    SC_METHOD(thread_xor_ln8_fu_57_p2);
    sensitive << ( tmp_fu_41_p3 );

    SC_METHOD(thread_xor_ln9_fu_83_p2);
    sensitive << ( tmp_2_fu_75_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sw_V, "(port)sw_V");
    sc_trace(mVcdFile, led_V, "(port)led_V");
    sc_trace(mVcdFile, led_V_ap_vld, "(port)led_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_41_p3, "tmp_fu_41_p3");
    sc_trace(mVcdFile, tmp_1_fu_49_p3, "tmp_1_fu_49_p3");
    sc_trace(mVcdFile, xor_ln8_1_fu_63_p2, "xor_ln8_1_fu_63_p2");
    sc_trace(mVcdFile, xor_ln8_fu_57_p2, "xor_ln8_fu_57_p2");
    sc_trace(mVcdFile, tmp_2_fu_75_p3, "tmp_2_fu_75_p3");
    sc_trace(mVcdFile, xor_ln9_fu_83_p2, "xor_ln9_fu_83_p2");
    sc_trace(mVcdFile, and_ln9_fu_89_p2, "and_ln9_fu_89_p2");
    sc_trace(mVcdFile, and_ln9_2_fu_101_p2, "and_ln9_2_fu_101_p2");
    sc_trace(mVcdFile, and_ln9_1_fu_95_p2, "and_ln9_1_fu_95_p2");
    sc_trace(mVcdFile, or_ln9_fu_107_p2, "or_ln9_fu_107_p2");
    sc_trace(mVcdFile, and_ln8_fu_69_p2, "and_ln8_fu_69_p2");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void top::thread_and_ln8_fu_69_p2() {
    and_ln8_fu_69_p2 = (xor_ln8_1_fu_63_p2.read() & xor_ln8_fu_57_p2.read());
}

void top::thread_and_ln9_1_fu_95_p2() {
    and_ln9_1_fu_95_p2 = (and_ln9_fu_89_p2.read() & tmp_fu_41_p3.read());
}

void top::thread_and_ln9_2_fu_101_p2() {
    and_ln9_2_fu_101_p2 = (tmp_1_fu_49_p3.read() & xor_ln8_fu_57_p2.read());
}

void top::thread_and_ln9_fu_89_p2() {
    and_ln9_fu_89_p2 = (xor_ln8_1_fu_63_p2.read() & xor_ln9_fu_83_p2.read());
}

void top::thread_ap_done() {
    ap_done = ap_start.read();
}

void top::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void top::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void top::thread_led_V() {
    led_V = esl_concat<2,1>(esl_concat<1,1>(ap_const_lv1_0, or_ln9_fu_107_p2.read()), and_ln8_fu_69_p2.read());
}

void top::thread_led_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) {
        led_V_ap_vld = ap_const_logic_1;
    } else {
        led_V_ap_vld = ap_const_logic_0;
    }
}

void top::thread_or_ln9_fu_107_p2() {
    or_ln9_fu_107_p2 = (and_ln9_2_fu_101_p2.read() | and_ln9_1_fu_95_p2.read());
}

void top::thread_tmp_1_fu_49_p3() {
    tmp_1_fu_49_p3 = sw_V.read().range(2, 2);
}

void top::thread_tmp_2_fu_75_p3() {
    tmp_2_fu_75_p3 = sw_V.read().range(1, 1);
}

void top::thread_tmp_fu_41_p3() {
    tmp_fu_41_p3 = sw_V.read().range(3, 3);
}

void top::thread_xor_ln8_1_fu_63_p2() {
    xor_ln8_1_fu_63_p2 = (tmp_1_fu_49_p3.read() ^ ap_const_lv1_1);
}

void top::thread_xor_ln8_fu_57_p2() {
    xor_ln8_fu_57_p2 = (tmp_fu_41_p3.read() ^ ap_const_lv1_1);
}

void top::thread_xor_ln9_fu_83_p2() {
    xor_ln9_fu_83_p2 = (tmp_2_fu_75_p3.read() ^ ap_const_lv1_1);
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sw_V\" :  \"" << sw_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"led_V\" :  \"" << led_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"led_V_ap_vld\" :  \"" << led_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

