-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sw_V : IN STD_LOGIC_VECTOR (3 downto 0);
    led_V : OUT STD_LOGIC_VECTOR (2 downto 0);
    led_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.956000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=16,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal tmp_fu_41_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_49_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_1_fu_63_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln8_fu_57_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_75_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln9_fu_83_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_89_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_2_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln9_fu_107_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln8_fu_69_p2 : STD_LOGIC_VECTOR (0 downto 0);


begin



    and_ln8_fu_69_p2 <= (xor_ln8_fu_57_p2 and xor_ln8_1_fu_63_p2);
    and_ln9_1_fu_95_p2 <= (tmp_fu_41_p3 and and_ln9_fu_89_p2);
    and_ln9_2_fu_101_p2 <= (xor_ln8_fu_57_p2 and tmp_1_fu_49_p3);
    and_ln9_fu_89_p2 <= (xor_ln9_fu_83_p2 and xor_ln8_1_fu_63_p2);
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    led_V <= ((ap_const_lv1_0 & or_ln9_fu_107_p2) & and_ln8_fu_69_p2);

    led_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            led_V_ap_vld <= ap_const_logic_1;
        else 
            led_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln9_fu_107_p2 <= (and_ln9_2_fu_101_p2 or and_ln9_1_fu_95_p2);
    tmp_1_fu_49_p3 <= sw_V(2 downto 2);
    tmp_2_fu_75_p3 <= sw_V(1 downto 1);
    tmp_fu_41_p3 <= sw_V(3 downto 3);
    xor_ln8_1_fu_63_p2 <= (tmp_1_fu_49_p3 xor ap_const_lv1_1);
    xor_ln8_fu_57_p2 <= (tmp_fu_41_p3 xor ap_const_lv1_1);
    xor_ln9_fu_83_p2 <= (tmp_2_fu_75_p3 xor ap_const_lv1_1);
end behav;
